base:
  project_name: Computer Vision
  # set PYTHONPATH=%PYTHONPATH%;C:\project\3.ComputerVision
model_compile:
  loss: binary_crossentropy
  optimizer: adam
  learning_rate: 0.00001
  momentum: 0.9
  nesterov: True  # True False
  beta_1: 0.9
  beta_2: 0.999
  epsilon: 0.000001
  decay: 0.0
  rmsgrad: False  # True False
  metrics: ['accuracy']

model_training:
  batch_size: 256
  epochs: 1
  steps_per_epoch: 5
  validation_steps: 32

data_augmentation: none  # none preprocess random_erasing
inception_scratch_training: "N"  # Y N

callbacks:
  checkpoint_file_path: 'artifacts/model/densenet/my_model.h5'
  early_stopping_callback:
    patience: 3
  LearningRateScheduler:
    epoch: 10
    initial_learning_rate: 0.01
    drop: 0.96
    epochs_drop: 8
  ReduceLROnPlateau:
    monitor: val_accuracy  # Metric to be measured
    factor: 0.01  # Factor by which learning rate will be reduced
    patience: 3  # No. of epochs after which if there is no improvement in the val_acc, the learning rate is reduced
    min_lr: 0.00001  # The minimum learning rate: 1e-5

dataset: cifar10_original  # mnist cifar10_original cifar10_resize cifar100 custom_dataset
classes: 10   # y_train.shape[1]
img_rows: 32
img_cols: 32

model: dense_net_convnet_transfer_learning
  # ConvNet MNIST
  # model_architecture_original
  # model_architecture_16_channels_replaced_with_8_channels
  # model_architecture_max_pool_after_image_reduced_to_8
  # model_architecture_one_more_11_conv_to_reduce_dimension_from_16_to_10_with_conv_size_8

  # VGG
  # build_model_vgg_16
  # build_model_vgg_19
  # build_vgg_model_transfer_leaning_custom
  # build_vgg_model_vgg16_transfer_learning_cifar
  # build_vgg_model_vgg19_transfer_learning_cifar

  # Inception
  # build_model_inception
  # inception_transfer_learning
  # inception_transfer_learning_starting_from_mixed_7_layer

  # ResNet
  # resnet_transfer_learning
  # resnet_convnet_transfer_learning
  # resnet_transfer_learning_skip_bn
  # resNet50_scratch

  # DenseNet
  # dense_net_transfer_learning
  # dense_net_convnet_transfer_learning

  # EfficientNet
  # efficient_net_transfer_learning
  # efficient_net_convnet_transfer_learning